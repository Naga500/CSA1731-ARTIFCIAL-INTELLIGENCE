import heapq
goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]


def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i * 3 + j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance


def get_possible_moves(state):
    moves = []
    zero_index = state.index(0)
    row, col = zero_index // 3, zero_index % 3
    deltas = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    for dx, dy in deltas:
        new_row, new_col = row + dx, col + dy
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = state[:]
            new_state[row * 3 + col], new_state[new_row * 3 + new_col] = new_state[new_row * 3 + new_col], new_state[row * 3 + col]
            moves.append(new_state)
    return moves


def solve_8_puzzle(initial_state):
    visited = set()
    heap = [(manhattan_distance(initial_state), 0, initial_state)]
    
    while heap:
        _, moves, state = heapq.heappop(heap)
        if state == goal_state:
            return moves
        
        if tuple(state) in visited:
            continue
        visited.add(tuple(state))
        
        possible_moves = get_possible_moves(state)
        for next_state in possible_moves:
            if tuple(next_state) not in visited:
                next_moves = moves + 1
                priority = next_moves + manhattan_distance(next_state)
                heapq.heappush(heap, (priority, next_moves, next_state))
    return -1


initial_state = [1, 2, 3, 4, 5, 6, 0, 7, 8]
moves = solve_8_puzzle(initial_state)
if moves != -1:
    print(f"Number of moves required to solve the puzzle: {moves}")
else:
    print("Puzzle is unsolvable.")
