def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col:
            return False
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i] == j:
            return False
    
  
    for i, j in zip(range(row-1, -1, -1), range(col+1, len(board))):
        if board[i] == j:
            return False
    
    return True

def solve_n_queens_util(board, row):
    if row == len(board):
        return [board[:]]
    
    solutions = []
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row] = col
            solutions.extend(solve_n_queens_util(board, row + 1))
            board[row] = -1  # Backtrack
    return solutions

def solve_n_queens(n):
    board = [-1] * n
    solutions = solve_n_queens_util(board, 0)
    return solutions

def print_board(board):
    for row in board:
        print(' '.join(['Q' if col == row[i] else '.' for i in range(len(row))]))
    print()


solutions = solve_n_queens(8)
print(f"Number of solutions: {len(solutions)}")
for solution in solutions:
    print_board(solution)
